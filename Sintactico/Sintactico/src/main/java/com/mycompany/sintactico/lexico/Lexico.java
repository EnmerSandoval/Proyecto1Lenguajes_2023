/* The following code was generated by JFlex 1.7.0 */

package com.mycompany.sintactico.lexico;


import java.util.ArrayList;
import java.util.Stack;
import java.util.List;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\75\1\76\1\76\1\3\22\0\1\5\1\65\1\73"+
    "\1\77\1\0\1\72\1\50\1\46\1\55\1\56\1\67\1\66\1\11"+
    "\1\6\1\10\1\71\1\7\10\2\1\7\1\63\1\64\1\52\1\54"+
    "\1\53\1\0\1\70\1\41\2\1\1\42\1\1\1\47\7\1\1\36"+
    "\1\43\2\1\1\44\1\1\1\45\6\1\1\61\1\74\1\62\1\50"+
    "\1\1\1\0\1\12\1\21\1\23\1\14\1\16\1\30\1\35\1\40"+
    "\1\26\1\1\1\22\1\24\1\34\1\13\1\25\1\32\1\1\1\17"+
    "\1\15\1\20\1\27\1\1\1\37\1\31\1\33\1\1\1\57\1\50"+
    "\1\60\1\51\6\0\1\76\u1fa2\0\1\76\1\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\24\2\1\1\1\2\2\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\2\6\1\1\1\6\1\1\1\24\3\0\2\7"+
    "\2\0\1\13\1\0\1\2\1\25\13\2\1\26\2\25"+
    "\16\2\1\0\1\27\1\0\1\2\1\12\2\0\1\30"+
    "\1\0\1\7\1\0\1\7\2\2\1\26\10\2\1\0"+
    "\13\2\1\0\1\2\1\0\1\31\1\0\2\2\1\0"+
    "\5\2\2\0\3\2\1\32\1\0\1\30\1\2\1\0"+
    "\3\2\1\33\2\2\1\34\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\100\0\u0140\0\u0180"+
    "\0\u01c0\0\100\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\100\0\u07c0\0\u0800\0\u0840\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\u0840\0\u0780\0\u0880"+
    "\0\u0780\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\100\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\200\0\200\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u0700\0\100\0\u1280\0\u12c0\0\100"+
    "\0\u0900\0\u1300\0\u0980\0\u1340\0\u0ac0\0\u1380\0\u0b40\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\200\0\u0140\0\100\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\100\0\u1f40\0\u1f80\0\100\0\u1fc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\26\1\3\1\27\1\30\1\3\1\31\1\32\1\33"+
    "\1\3\1\34\1\3\1\35\1\3\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\57\1\63\1\2\1\5\1\0\1\64"+
    "\101\0\2\3\4\0\1\3\2\0\34\3\1\0\1\3"+
    "\32\0\1\4\4\0\1\4\1\65\72\0\1\5\71\0"+
    "\1\5\7\0\1\66\74\0\1\67\3\0\1\70\1\71"+
    "\2\72\45\0\1\73\6\0\1\74\13\0\1\4\3\0"+
    "\1\70\1\11\1\75\1\72\67\0\2\3\4\0\1\3"+
    "\2\0\1\3\1\76\1\3\1\77\30\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\13\3\1\100\20\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\4\3"+
    "\1\101\27\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\12\3\1\102\4\3\1\103\14\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\1\104\3\3\1\105"+
    "\27\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\5\3\1\106\26\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\5\3\1\107\26\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\12\3\1\110\1\111\20\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\1\112"+
    "\33\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\5\3\1\113\26\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\1\3\1\114\1\3\1\115\12\3\1\114"+
    "\3\3\1\116\11\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\5\3\1\117\5\3\1\120\1\121\17\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\1\122"+
    "\4\3\1\123\26\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\14\3\1\124\17\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\12\3\1\125\21\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\13\3\1\126"+
    "\15\3\1\127\2\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\14\3\1\130\11\3\1\131\5\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\24\3\1\132"+
    "\7\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\32\3\1\113\1\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\5\3\1\133\26\3\1\0\1\3\30\0"+
    "\46\134\1\135\25\134\1\136\3\134\1\0\2\3\4\0"+
    "\1\3\2\0\1\137\33\3\1\0\1\3\104\0\1\74"+
    "\75\0\1\41\1\0\1\140\76\0\1\41\1\140\77\0"+
    "\1\140\111\0\1\74\1\57\64\0\1\74\14\0\1\57"+
    "\6\0\73\141\1\135\1\142\3\141\75\64\1\0\2\64"+
    "\2\0\1\143\4\0\1\143\75\0\1\144\74\0\1\67"+
    "\4\0\1\67\1\65\75\0\2\70\2\72\70\0\1\67"+
    "\3\0\1\70\1\71\1\75\1\72\74\0\2\145\132\0"+
    "\1\146\37\0\1\143\3\0\1\145\1\147\71\0\2\3"+
    "\4\0\1\3\2\0\2\3\1\114\31\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\3\3\1\150\30\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\1\3"+
    "\1\151\4\3\1\152\25\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\12\3\1\114\3\3\1\114\15\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\3\3"+
    "\1\153\10\3\1\154\17\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\11\3\1\155\22\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\14\3\1\156\17\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\6\3"+
    "\1\157\25\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\21\3\1\114\12\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\4\3\1\160\27\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\1\122\33\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\1\3\1\161"+
    "\32\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\22\3\1\162\11\3\1\0\1\3\31\0\2\3\2\0"+
    "\1\163\1\0\1\3\2\0\1\3\1\164\32\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\20\3\1\165"+
    "\13\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\13\3\1\166\20\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\5\3\1\114\26\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\1\3\1\167\32\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\3\3\1\170"+
    "\30\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\14\3\1\171\17\3\1\0\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\4\3\1\172\27\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\13\3\1\173\20\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\1\3\1\153"+
    "\32\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\33\3\1\113\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\6\3\1\174\25\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\14\3\1\175\17\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\30\3\1\113\3\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\15\3"+
    "\1\176\16\3\1\0\1\3\124\0\1\177\4\0\2\3"+
    "\4\0\1\3\2\0\12\3\1\200\21\3\1\0\1\3"+
    "\124\0\1\201\10\0\1\202\152\0\1\203\20\0\2\3"+
    "\4\0\1\3\2\0\4\3\1\204\27\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\12\3\1\205\21\3"+
    "\1\0\1\3\31\0\2\3\2\0\1\206\1\0\1\3"+
    "\2\0\34\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\4\3\1\114\27\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\16\3\1\114\15\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\4\3\1\207\27\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\3\3"+
    "\1\153\30\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\15\3\1\210\16\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\1\211\33\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\6\3\1\212\25\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\7\3\1\213"+
    "\24\3\1\0\1\3\43\0\1\214\65\0\2\3\4\0"+
    "\1\3\2\0\34\3\1\215\1\3\31\0\2\3\4\0"+
    "\1\3\2\0\13\3\1\204\20\3\1\0\1\3\31\0"+
    "\2\3\4\0\1\3\2\0\22\3\1\114\11\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\1\216\33\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\3\3"+
    "\1\114\30\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\1\3\1\217\32\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\12\3\1\76\21\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\7\3\1\220\24\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\26\3"+
    "\1\114\5\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\12\3\1\153\21\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\4\3\1\221\27\3\1\0\1\3"+
    "\30\0\3\134\1\0\71\134\2\0\1\134\1\0\2\3"+
    "\4\0\1\3\2\0\3\3\1\176\30\3\1\0\1\3"+
    "\30\0\3\141\1\0\71\141\2\0\1\141\5\0\1\222"+
    "\160\0\1\223\12\0\2\3\4\0\1\3\2\0\5\3"+
    "\1\217\26\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\13\3\1\224\20\3\1\0\1\3\56\0\1\225"+
    "\52\0\2\3\4\0\1\3\2\0\20\3\1\217\13\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\5\3"+
    "\1\226\26\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\10\3\1\114\23\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\14\3\1\227\17\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\2\3\1\230\31\3"+
    "\1\0\1\3\55\0\1\215\72\0\1\231\60\0\2\3"+
    "\4\0\1\3\2\0\12\3\1\232\21\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\6\3\1\114\25\3"+
    "\1\0\1\3\31\0\2\3\4\0\1\3\2\0\1\233"+
    "\33\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\11\3\1\220\22\3\1\0\1\3\43\0\1\234\65\0"+
    "\2\3\4\0\1\3\2\0\1\3\1\114\32\3\1\0"+
    "\1\3\31\0\2\3\4\0\1\3\2\0\1\3\1\235"+
    "\32\3\1\0\1\3\31\0\2\3\4\0\1\3\2\0"+
    "\1\114\33\3\1\0\1\3\31\0\2\3\4\0\1\3"+
    "\2\0\12\3\1\106\21\3\1\0\1\3\31\0\2\3"+
    "\4\0\1\3\2\0\12\3\1\114\21\3\1\0\1\3"+
    "\31\0\2\3\4\0\1\3\2\0\15\3\1\153\16\3"+
    "\1\0\1\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8192];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\27\1\1\11"+
    "\3\1\10\11\7\1\3\0\2\1\2\0\1\11\1\0"+
    "\36\1\1\0\1\11\1\0\1\1\1\11\2\0\1\1"+
    "\1\0\1\1\1\0\14\1\1\0\13\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\5\1\2\0\4\1"+
    "\1\0\1\11\1\1\1\0\3\1\1\11\2\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexema;    
    private int contador;
    private int currentIndentationLevel = 0;
    private Stack<Integer> indentationStack = new Stack<>();

    private int indentacionMetodo(String texto) {
        int variable = 0;
        for (char c : texto.toCharArray()) {
            if (c == ' ' || c == '\t') {
                variable++;
            } else {
                break;
            }
        }
        int indentaciones = variable / 4;  // Divide por 4 para calcular el nivel de indentación
        return indentaciones;
    }

    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
      contador = 1;
    indentationStack.push(0); 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Token(TipoToken.ERROR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 29: break;
          case 2: 
            { lexema = yytext();
    return new Token(TipoToken.IDENTIFICADOR, yyline + 1, yycolumn + 1, lexema);
            } 
            // fall through
          case 30: break;
          case 3: 
            { lexema = yytext();
    return new Token(TipoToken.CONSTANTE, yyline + 1, yycolumn + 1, lexema);
            } 
            // fall through
          case 31: break;
          case 4: 
            { return new Token(TipoToken.NEWLINE, yyline+1, yycolumn+1, "");
            } 
            // fall through
          case 32: break;
          case 5: 
            { int indentacion = indentacionMetodo(yytext());
    contador++;
    if (indentacion > currentIndentationLevel) {
        // Incrementar el nivel de indentación
        currentIndentationLevel = indentacion;
        indentationStack.push(indentacion);
        return new Token(TipoToken.INDENT, yyline + 1, yycolumn + 1, "");
    } else if (indentacion < currentIndentationLevel) {
        // Reducir el nivel de indentación
        while (indentationStack.peek() > indentacion) {
            indentationStack.pop();
            contador++;
            return new Token(TipoToken.DEDENT, yyline + 1, yycolumn + 1, "");
        }
    }
            } 
            // fall through
          case 33: break;
          case 6: 
            { return new Token(TipoToken.ARITMETICO, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 34: break;
          case 7: 
            { return new Token(TipoToken.DECIMAL, yytext());
            } 
            // fall through
          case 35: break;
          case 8: 
            { return new Token(TipoToken.COMA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 36: break;
          case 9: 
            { return new Token(TipoToken.BITOPERADOR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 37: break;
          case 10: 
            { return new Token(TipoToken.COMPARACION, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 38: break;
          case 11: 
            { return new Token(TipoToken.ASIGNACION, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 39: break;
          case 12: 
            { return new Token(TipoToken.PARENTESISAPERTURA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 40: break;
          case 13: 
            { return new Token(TipoToken.PARENTESISCIERRE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 41: break;
          case 14: 
            { return new Token(TipoToken.LLAVEAPERTURA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 42: break;
          case 15: 
            { return new Token(TipoToken.LLAVECIERRE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 43: break;
          case 16: 
            { return new Token(TipoToken.CORCHETEAPERTURA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 44: break;
          case 17: 
            { return new Token(TipoToken.CORCHETECIERRE, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 45: break;
          case 18: 
            { return new Token(TipoToken.DOSPUNTOS, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 46: break;
          case 19: 
            { return new Token(TipoToken.PUNTOCOMA, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 47: break;
          case 20: 
            { lexema=yytext(); return new Token(TipoToken.COMENTARIO, yyline+1, yycolumn+1, lexema);
            } 
            // fall through
          case 48: break;
          case 21: 
            { lexema=yytext(); return new Token(TipoToken.PALABRA_RESERVADA, yyline+1, yycolumn+1, lexema);
            } 
            // fall through
          case 49: break;
          case 22: 
            { lexema=yytext(); return new Token(TipoToken.LOGICO, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 50: break;
          case 23: 
            { lexema=yytext(); return new Token(TipoToken.CADENA, yyline+1, yycolumn+1, lexema);
            } 
            // fall through
          case 51: break;
          case 24: 
            { lexema=yytext(); return new Token(TipoToken.CONSTANTE, yyline+1, yycolumn+1, lexema);
            } 
            // fall through
          case 52: break;
          case 25: 
            { int indentacion = indentacionMetodo(yytext());
    System.out.println("valor de la identacion es: " + indentacion);
    System.out.println("valor de currentIdentationLevel es: " + currentIndentationLevel); 
    contador++;
    if (indentacion > currentIndentationLevel) {
        // Incrementar el nivel de indentación
        currentIndentationLevel = indentacion;
        indentationStack.push(indentacion);
        return new Token(TipoToken.INDENT, yyline + 1, yycolumn + 1, "");
    } else if (indentacion < currentIndentationLevel) {
        // Reducir el nivel de indentación
        System.out.println("Aca esta la verificacion si es menor");
        while (indentationStack.peek() > indentacion) {
            indentationStack.pop();
            contador++;
            return new Token(TipoToken.DEDENT, yyline + 1, yycolumn + 1, "");
        }
    }
            } 
            // fall through
          case 53: break;
          case 26: 
            { return new Token(TipoToken.BOOLEANO, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 54: break;
          case 27: 
            { return new Token(TipoToken.IDENTIFICADORES, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 55: break;
          case 28: 
            { return new Token(TipoToken.MEMBRESIAOPERADOR, yyline+1, yycolumn+1, yytext());
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
